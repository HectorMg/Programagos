module.exports = (function(){

	//Helper function to get amount of keys an object contains
	var size = function(obj) {
	    var size = 0, key;
	    for (key in obj) {
			if (obj.hasOwnProperty(key)) size++;
		}
		return size;
	};

	//Constructor for Composition class
	/*
		Arguments for Composition must follow the following format:
		Ex.

		Composition("player", player);

		The string "player" refers to composition's identifier, which is used by neighbour compositions to access it.
	*/
	function Composition(){
		this.components = {};

		//Since 'arguments' is in the format ["name0",composition0, "name1", composition1, ...],
		//we use the name as a key and composition as their values inside the 'this.components' object.

		for (var i = 0; i < arguments.length/2; i++) {
			this.components[arguments[i*2]] = arguments[i*2+1];
		}

		//Backend start function. Calls this.start if defined and start functions inside components object.
		this._start = function(){
			if(this.start != undefined){
				this.start.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._start.apply(this.components[key], arguments);
			}
		}

		//Backend udpdate function. Calls this.update if defined and update functions inside components object.
		this._update = function(){
			if(this.update != undefined){
				this.update.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._update.apply(this.components[key], arguments);
			}
		}

		//Backend draw function. Calls this.draw if defined and draw functions inside components object.
		this._draw = function(){
			if(this.draw != undefined){
				this.draw.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._draw.apply(this.components[key], arguments);
			}
		}

		//Backend end function. Calls this.end if defined and end functions inside components object.
		this._end = function(){
			if(this.end != undefined){
				this.end.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._end.apply(this.components[key],arguments);
			}
		}
	}

	return Composition;
})();
