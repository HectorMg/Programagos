module.exports = (function(){
	
	var size = function(obj) {
	    var size = 0, key;
	    for (key in obj) {
			if (obj.hasOwnProperty(key)) size++;
		}
		return size;
	};

	function Composition(){
		this.components = {};
		for (var i = 0; i < arguments.length/2; i++) {
			this.components[arguments[i*2]] = arguments[i*2+1];
		}

		//Make a copy of 'this'. We don't want the functions below to reference 'this' since it will be changing because of apply
		
		this._start = function(){
			if(this.start != undefined){
				this.start.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._start.apply(this.components[key], arguments);
			}
		}
		this._update = function(){
			if(this.update != undefined){
				this.update.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._update.apply(this.components[key], arguments);
			}
		}
		this._draw = function(){
			if(this.draw != undefined){
				this.draw.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._draw.apply(this.components[key], arguments);
			}
		}
		this._end = function(){
			if(this.end != undefined){
				this.end.apply(this, arguments);
			}
			for(key in this.components){
				this.components[key].base = this.components;
				this.components[key]._end.apply(this.components[key],arguments);
			}
		}
	}

	return Composition;
})();