var Composition = require('Composition');
var Renderer = require('VertexRenderer');
var Transform = require('Transform');
var Vertices = require('Vertices');
var HueManipulator = require('HueManipulator');
//var Collider = require('VertexCollider');

var terrain = new Composition(
	'transform', Transform(0,0),
	'renderer', Renderer(null, 1),
	'hue', HueManipulator
	//'collider', Collider()
);

var cosInterpolate = function(a, b, t){
		var ft = t*Math.PI;
		var f = (1-Math.cos(ft))*0.5;
		return  a*(1-f) + b*f;
	}

var randomArray = function(size){
	var result = [];
	result[0] = Math.random()*2-1;
	for(var i = 1; i < size; i++){
		var r = Math.random()*2-1;
		var e = Math.exp(-Math.pow(r, 2)/2);
		result[i] = result[i-1] + r*e*0.4;
	}
	return result;
}

var noise = function(arrayRandom, size, t){
	var pointCount = arrayRandom.length-1;
	var currentPoint = Math.floor(pointCount*t/size);
	
	return cosInterpolate(arrayRandom[currentPoint]*100,
						  arrayRandom[currentPoint+1]*100,
						  (t-currentPoint/pointCount*size)/(size/pointCount));
}

terrain.start = function(){
	this.components.renderer.mode = "both";
	this.components.renderer.fillStyle="#FF0000";
	this.components.renderer.strokeStyle="#000000";

	var baseArray = randomArray(9);

	var vertices = [];
	vertices[0] = {x:0, y:window.innerHeight};
	for(var i = 0; i <= window.innerWidth/2; i++){
		vertices[i+1] = {x:i*2, y:noise(baseArray, window.innerWidth, i*2)+window.innerHeight/2};
	}
	vertices[i+1] = {x:window.innerWidth, y:window.innerHeight};
	this.components.renderer.vertices = new Vertices(vertices);

	this.components.hue.hue = Math.random()*360;

}


module.exports = terrain;