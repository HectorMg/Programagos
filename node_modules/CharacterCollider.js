//CharacterCollider.js
//Simple collision detection for an object with terrain
//Removes any accelerations when it collides

var Composition = require('Composition');

module.exports = function(){

	var CharacterCollider = new Composition();

	CharacterCollider.isGrounded = false;
	CharacterCollider.update = function(){
		//Get terrain height for a given x value.
		//The + this.base.renderer.image.height is so that it checks the feet of the character
		//This is not the best way to do it. A better way would be to define an "anchor point" inside Transform.js
		var terrainHeight = getTerrainHeight(
			this.base.transform.position.x+this.base.renderer.image.width/2,
			this.base.transform.position.y+this.base.renderer.image.height+2
		);

		//If terrainHeight is -1, then obj is not in contact with terrain
		if(terrainHeight==-1){
			this.isGrounded = false;
		}else{
			//Set this.base.rigidbody.speed.y to 0 so it stops falling.
			this.base.rigidbody.speed.y = 0;

			this.isGrounded = true;
			//Set object to be on top of terrain.
			this.base.transform.localPosition.y = terrainHeight-this.base.renderer.image.height;
		}
	}

	return CharacterCollider;
}
var getTerrainHeight = function(x, y){
	var imgData = engine.find("terrain").components.renderer.canvas.context.getImageData(Math.ceil(x),0,1, Math.ceil(y));

	//Check if player is underground
	if(imgData.data[imgData.data.length-1]!=0){
		//loop for every pixel upwards from player
		for(var i = Math.ceil(y); i > 0; i--){
			//If the pixel is the surface
			if(imgData.data[i*4+3]==0){
				//Return surface height
				return i;
			}
		}
		return 0;
	}else{//Player is not in contact with floor
		return -1;
	}
	
}
