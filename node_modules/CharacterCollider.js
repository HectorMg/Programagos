//CharacterCollider.js
//Simple collision detection for an object with terrain
//Removes any accelerations when it collides

var Composition = require('Composition');

module.exports = function(){

	var CharacterCollider = new Composition();

	CharacterCollider.isGrounded = false;
	CharacterCollider.update = function(){
		//Get terrain height for a given x value.
		var terrainHeightAtX = getTerrainHeight(this.base.transform.position.x);

		//If the terrain height is on top of base object...
		//The + this.base.renderer.image.height is so that it checks the feet of the character
		//This is not the best way to do it. A better way would be to define an "anchor point" inside Transform.js
		if(terrainHeightAtX < this.base.transform.position.y + this.base.renderer.image.height){
			//Set this.base.rigidbody.speed.y to 0 so it stops falling.
			this.base.rigidbody.speed.y = 0;

			//Pass isGrounded flag to some gravity component.
			this.isGrounded = true;

			//Set object to be on top of terrain.
			this.base.transform.localPosition.y = terrainHeightAtX-this.base.renderer.image.height;
		}
		else if(terrainHeightAtX == this.base.transform.position.y + this.base.renderer.image.height){
			this.isGrounded = true;
		}
		else{
			//Pass isGrounded flag to some gravity component.
			this.isGrounded = false;
		}
	}

	return CharacterCollider;
}
var getTerrainHeight = function(x, y){
	//Basicamente lo que trato de hacer es encontrar el pixel del terrain mas alto para una x dada.

	var imgData = engine.find("terrain").components.renderer.imageData;
	for(var i = Math.ceil(x)*4; i < imgData.data.length; i+=3200){
		if(imgData.data[i+3]!=0){
			return (i-Math.ceil(x)*4)/3200;
		}
	}
}
