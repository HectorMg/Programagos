//Spell ball that is cast by players

var Composition = require("Composition");
var testController = require("testController");
var Rigidbody = require("Rigidbody");
var VertexRenderer = require("VertexRenderer");
var Vertices = require("Vertices");
var Transform = require("Transform");
var TerrainDestroyer = require("TerrainDestroyer");
var Vec2 = require('vec2');
var Circle = require('Circle');
var LifeComponent = require("LifeComponent");
var LifeBar = require("LifeBar");
var playAudio = require("playAudio");
var vm = require("vm");


module.exports = function(caster, initVel, useGravity, code){
	var SpellBall = new Composition(
		'transform', Transform(0,0),
		'rigidbody', Rigidbody(),
		'renderer', VertexRenderer(new Vertices(Circle(10,10)),-8), //Used for collision detection
		'glow', VertexRenderer(new Vertices(Circle(15,15)),-2,"hard-light"), //Adds a glow effect
		'destroyer', TerrainDestroyer(),
		'life', LifeComponent(),
		'lifeBar', LifeBar()
	);

	SpellBall.start = function(){
		this.changeColor("rgb(0, 234, 230)");
		this.useGravity = useGravity;
		// //Set casting player
		this.caster = caster;
		//Set renderers to static
		this.components.renderer.static = false;
		this.components.glow.static = false;

		this.components.rigidbody.speed = initVel;

		playAudio("resources/attackSound.ogg");

		if(code!=null){
			this.isScript = true;

			this.targets = [];
			this.pastPosition = new Vec2(0,0);


			var script = new vm.Script(code, {filename: "Player's Code"});

			var self = this;
			var sandbox = {
				getPlayerCoordinates: function(name){
					var players = engine.find("turnManager").players;
					for(var i = 0; i < players.length; i++){
						if(players[i].name==name){
							terminal.value = "Returning Vec2("+players[i].components.transform.position.x+", "+players[i].components.transform.position.y+")...";
							return players[i].components.transform.position;
						}
					}
				},
				print: function(code){
					terminal.value = code;
				},
				move:function (x, y){
					self.moveTo(new Vec2(x,y));
				},
				getSpellCoordinates: function(){
					return self.getFutureCoords();
				},
				changeColor:function(color){
					self.changeColor(color);
				},
				changeRadius:function(radius){
					self.changeRadius(radius);
					terminal.value =("Changed Radius");
				}
			}

			//Create sandbox from object
			var context = new vm.createContext(sandbox);

			//Run script
			script.runInContext(context);
		}
	}

	SpellBall.update = function(deltaTime){

		if(this.useGravity==true){
			this.components.rigidbody.acceleration.y = 100;
		}
		//If its life has ended, destroy.
		if(this.components.life.percentage <= 0){
			this.destroy();
			this.caster.endTurn();
		}

		if(this.components.transform.position.x>window.innerWidth ||
		   this.components.transform.position.x < 0 ||
		   this.components.transform.position.y > window.innerHeight){
			this.components.life.percentage = 0;
		}

		if(this.isScript){
			if(this.targets.length > 0){
				if(this.targets[0].subtract(this.components.transform.position, true).magnitude() > 2){
					var direction = this.targets[0].subtract(this.components.transform.position, true).normalize(true);
					direction.multiply(deltaTime*100);
					this.components.transform.localPosition.add(direction);

				}else{
					this.pastPosition = this.targets[0];
					this.targets.shift();
				}
			}else{
				this.destroy();
				this.caster.endTurn();
			}
		}

	}
	SpellBall.draw = function(){
		//Create a radial gradient to be used in glow component
		var grd = this.components.glow.canvas.context.createRadialGradient(
			this.components.transform.position.x,
			this.components.transform.position.y,
			0,
			this.components.transform.position.x,
			this.components.transform.position.y,
			20
		);

		//White at .3 from center
		grd.addColorStop(0.3,"rgba(255,255,255, 1)");

		//Oscillating blue from 0.45 - 0.55 from center at 0.5 transparency
		grd.addColorStop(0.5+0.05*Math.cos(window.performance.now()*0.01),this.color);
		//Green at end at 0 transparency
		grd.addColorStop(1,"rgba(0, 239, 23, 0)");

		//Set gradient to glow component
		this.components.glow.fillStyle = grd;
	}

	SpellBall.moveTo = function(vec){
		if(this.targets[0]==null){
			vec.add(this.caster.components.transform.position)
		}else{
			vec.add(this.targets[this.targets.length-1]);

		}
		this.targets.push(vec);
	}

	SpellBall.changeColor = function(color){
		var m = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);
		this.color = "rgba("+m[1]+","+m[2]+","+m[3]+",0.5)";
	}

	SpellBall.getFutureCoordinates = function(){
		var result = this.pastPosition.clone();
		for(var i = 0; i < this.targets.length; i++){
			result.add(this.targets[0]);
		}
		return result;
	}

	return SpellBall
}
