//Vertices.js
//This is a wrapper for vertices.
//Takes vertices in the form of [{x:0,y:0},{x:1,y:0},...] and gives a Vertices object
//Vertices.bottomRight refers to the bottom-right corner of a square that contains all vertices
//Vertices.topLeft refers to the top-left corner of a square that contains all vertices
//Usage: var myVertices = new Vertices([{x:0,y:0},{x:1,y:0}]);
//myVertices.topLeft 
//myVertices.vertices
var Vec2 = require("vec2");

module.exports = function(verts){
	//Declare private variable vertices to store the value used in this.vertices accessors.
	var vertices = null;

	//this.vertices accessors
	Object.defineProperties(this, {
		"vertices" : {
			//Getter. Returns private vertices value.
			get: function(){
				return vertices;
			},
			//Setter. Sets vertices local value and updates this.topLeft and this.bottomRight
			set: function(val){
				if(!(Array.isArray(val) && val[0] instanceof Vec2)){
					throw new Error("Value is not an array of Vec2");
				}
				vertices = val;
				this.bottomRight = this.vertices[0].clone();
				this.topLeft = this.vertices[0].clone();
				
				for(var vertex = 0; vertex < vertices.length; vertex++){
					if(vertices[vertex].x < this.topLeft.x){
						this.topLeft.x = vertices[vertex].x;
					}
					if(vertices[vertex].y < this.topLeft.y){
						this.topLeft.y = vertices[vertex].y;
					}
					if(vertices[vertex].x > this.bottomRight.x){
						this.bottomRight.x = vertices[vertex].x;
					}
					if(vertices[vertex].y > this.bottomRight.y){
						this.bottomRight.y = vertices[vertex].y;
					}
				}
			}
		}
	});

	//Validate verts param
	if(verts==undefined || verts==null){
		return;
	}
	
	//Finally set value of this.vertices to param
	this.vertices = verts;
}
