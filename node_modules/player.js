var Composition = require('Composition');
var Transform = require('Transform');
var ImageRenderer = require('ImageRenderer');
var Rigidbody = require('Rigidbody');
var characterCollider = require('CharacterCollider');
var CharacterController = require('CharacterController');
var gravity = require('Gravity');
var Vec2 = require('vec2');
var LifeComponent = require("LifeComponent");
var LifeBar = require('LifeBar');
var StepBar = require('StepBar');
var SpellBall = require('SpellBall');
var RadialSlider = require('RadialSlider');
var playAudio = require('playAudio');
var GameScore = require('GameScore');
var Timer = require('Timer');

module.exports = function(x, y, path){

	var player = new Composition(
		'transform', Transform(x,y),
		'controller', CharacterController(),
		'rigidbody', Rigidbody(),
		'collider', characterCollider(),
		'renderer', ImageRenderer(path, -4),
		'gravity', gravity(100),
		'life', LifeComponent(),
		'steps', LifeComponent(),
		'time', LifeComponent(),
		'LifeBar', LifeBar(),
		'StepBar', StepBar(),
		'RadialSlider', RadialSlider(),
		'Timer', Timer(20, this),
		'GameScore', GameScore()
	);

	player.setActive = function(value){
		//Make it so that player can no longer move
		this.components.rigidbody.speed = new Vec2(0,0);
		this.components.controller.active = value;
		this.components.Timer.active = value;

		//Flag that determines current player
		this.isActive = value;

		//If radial slider was active, clear
		if(this.components.RadialSlider.active)
			this.components.RadialSlider.propagate("clear");

		//Then set to inactive
		this.components.RadialSlider.active = value;
	}

	player.endTurn = function(){
		this.components.steps.percentage = 1;
		this.components.time.percentage = 1;
		this.components.Timer.timeSpent = 0;
		this.components.RadialSlider.radius = 50;
		this.base.turnManager.nextTurn();

	}

	//Throws spell ball
	player.castSpell = function(initVel){
		//Create SpellBall
		this.add('spell', SpellBall(this, initVel));

		//Set initial conditions
		this.components.spell.components.transform.localPosition = this.components.transform.position.clone();
		this.components.spell.components.transform.localPosition.x += (this.components.renderer.image.width/2);
		this.components.spell.components.transform.localPosition.y += (this.components.renderer.image.height/2);

		this.setActive(false);
		playAudio("resources/attackSound.ogg");
	}

	var timeClicked = 0;
	var shouldCount = false;

	player.keydown = function(keycode){
		if(keycode == 32){
			if(this.isActive){
				shouldCount = true;
			}
		}
	}

	player.keyup = function(keycode){
		if(keycode == 32){
			if(this.isActive){
				var initVel = this.components.RadialSlider.components.handle.components.transform.localPosition.clone();
				var velFactor = timeClicked * 1.5;
				initVel.multiply(velFactor);
				this.castSpell(initVel);
				shouldCount = false;
				timeClicked = 0;
			}
		}
	}
	player.update = function(deltaTime){
		if((this.components.steps.percentage <= 0) || (this.components.time.percentage <= 0)){
			this.endTurn();
		}
		if(shouldCount && timeClicked < 2){
			timeClicked += deltaTime;
			this.components.RadialSlider.radius = 50 +  (timeClicked * 20);
		}
		console.log("" +this.components.life.percentage)
		if(this.components.life.percentage <= 0.1){
			// this.components.TurnManager.removePlayer();
			window.location.reload();
		}
	}

	return player;
}
